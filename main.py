import statistical_tests as stat
import evaluation as data
import numpy as np
import pandas as pd
from scipy import stats

rg_turn_counter, rg_score_1, rg_score_2, rg_glue_icebreaker, rg_alana_bot, rg_duration, rg_coherence_metric_1, rg_coherence_metric_2, rg_coherence_metric_3, cc_turn_counter, cc_score_1, cc_score_2, cc_glue_icebreaker, cc_alana_bot, cc_duration, cc_coherence_metric_1, cc_coherence_metric_2, cc_coherence_metric_3, rg_avg_rating, rg_response_rating, cc_avg_rating, cc_response_rating, likert_rating = data.run()

rg_q1 = likert_rating[1:7][1].to_numpy()
rg_q2 = likert_rating[1:7][2].to_numpy()
rg_q3 = likert_rating[1:7][3].to_numpy()
rg_q4 = likert_rating[1:7][4].to_numpy()
rg_q5 = likert_rating[1:7][5].to_numpy()
rg_q6 = likert_rating[1:7][6].to_numpy()

# rg_q2 = np.asarray(likert_rating[1:7][2]).reshape(0,6)
# rg_q3 = np.asarray(likert_rating[1:7][3]).reshape(0,6)
# rg_q4 = np.asarray(likert_rating[1:7][4]).reshape(0,6)
# rg_q5 = np.asarray(likert_rating[1:7][5]).reshape(0,6)
# rg_q6 = np.asarray(likert_rating[1:7][6]).reshape(0,6)
# cc_q1 = np.asarray(likert_rating[7:][1]).reshape(0,6)
cc_q1 = likert_rating[7:][1].to_numpy()
cc_q2 = likert_rating[7:][2].to_numpy()
cc_q3 = likert_rating[7:][3].to_numpy()
cc_q4 = likert_rating[7:][4].to_numpy()
cc_q5 = likert_rating[7:][5].to_numpy()
cc_q6 = likert_rating[7:][6].to_numpy()





print("*************************************")
print("**** Turn counter ****")
print("ChitChat")
print(stats.describe(cc_turn_counter))
print("Mean {0}, SD {1}".format(cc_turn_counter.mean(), cc_turn_counter.std()))
print("GameBot")
print(stats.describe(rg_turn_counter))
print("Mean {0}, SD {1}".format(rg_turn_counter.mean(), rg_turn_counter.std()))
stat.check_icebreaker_statistical_significance(cc_turn_counter, rg_turn_counter)


print("**** Score 1 ****")
print("ChitChat")
print(stats.describe(cc_score_1))
print("Mean {0}, SD {1}".format(cc_score_1.mean(), cc_score_1.std()))
print("GameBot")
print(stats.describe(rg_score_1))
print("Mean {0}, SD {1}".format(rg_score_1.mean(), rg_score_1.std()))
stat.check_icebreaker_statistical_significance(cc_score_1, rg_score_1)


print("**** Score 2 ****")
print("ChitChat")
print(stats.describe(cc_score_2))
print("Mean {0}, SD {1}".format(cc_score_1.mean(), cc_score_1.std()))
print("GameBot")
print(stats.describe(rg_score_2))
print("Mean {0}, SD {1}".format(rg_score_2.mean(), rg_score_2.std()))
stat.check_icebreaker_statistical_significance(cc_score_2, rg_score_2)


print("\n**** Glue icebreaker ****")
print("ChitChat")
print(stats.describe(cc_glue_icebreaker))
print("Mean {0}, SD {1}".format(cc_glue_icebreaker.mean(), cc_glue_icebreaker.std()))
print("GameBot")
print(stats.describe(rg_glue_icebreaker))
print("Mean {0}, SD {1}".format(rg_glue_icebreaker.mean(),rg_glue_icebreaker.std()))
stat.check_icebreaker_statistical_significance(cc_glue_icebreaker, rg_glue_icebreaker)


print("\n**** Alana Bot ****")
print("ChitChat")
print(stats.describe(cc_alana_bot))
print("Mean {0}, SD {1}".format(cc_alana_bot.mean(), cc_alana_bot.std()))
print("GameBot")
print(stats.describe(rg_alana_bot))
print("Mean {0}, SD {1}".format(rg_alana_bot.mean(),rg_alana_bot.std()))
stat.check_icebreaker_statistical_significance(cc_alana_bot, rg_alana_bot)


print("\n**** Duration ****")
print("ChitChat")
print(stats.describe(cc_duration))
print("Mean {0}, SD {1}".format(cc_duration.mean(), cc_duration.std()))
print("GameBot")
print(stats.describe(rg_duration))
print("Mean {0}, SD {1}".format(rg_duration.mean(), rg_duration.std()))
stat.check_icebreaker_statistical_significance(cc_duration, rg_duration)

print("\n**** Coherence metric 1 ****")
print("ChitChat")
print(stats.describe(cc_coherence_metric_1))
print("Mean {0}, SD {1}".format(cc_coherence_metric_1.mean(), cc_coherence_metric_1.std()))
print("GameBot")
print(stats.describe(rg_coherence_metric_1))
print("Mean {0}, SD {1}".format(rg_coherence_metric_1.mean(), rg_coherence_metric_1.std()))
stat.check_icebreaker_statistical_significance(cc_coherence_metric_1, rg_coherence_metric_1)

print("\nCoherence metric 2")
print("ChitChat")
print(stats.describe(cc_coherence_metric_2))
print("Mean {0}, SD {1}".format(cc_coherence_metric_2.mean(), cc_coherence_metric_2.std()))
print("GameBot")
print(stats.describe(rg_coherence_metric_2))
print("Mean {0}, SD {1}".format(rg_coherence_metric_2.mean(), rg_coherence_metric_2.std()))
stat.check_icebreaker_statistical_significance(cc_coherence_metric_2, rg_coherence_metric_2)

print("\nCoherence metric 3")
print("ChitChat")
print(stats.describe(cc_coherence_metric_3))
print("Mean {0}, SD {1}".format(cc_coherence_metric_3.mean(), cc_coherence_metric_3.std()))
print("GameBot")
print(stats.describe(rg_coherence_metric_3))
print("Mean {0}, SD {1}".format(rg_coherence_metric_3.mean(), rg_coherence_metric_3.std()))
stat.check_icebreaker_statistical_significance(cc_coherence_metric_3, rg_coherence_metric_3)

print("\nUser experience question 1")
print("ChitChat")
print(stats.describe(cc_q1))
print("Mean {0}, SD {1}".format(cc_q1.mean(), cc_q1.std()))
print("GameBot")
print(stats.describe(rg_q1))
print("Mean {0}, SD {1}".format(rg_q1.mean(), rg_q1.std()))
stat.check_UX_statistical_significance(cc_q1, rg_q1)

print("\nUser experience question 2")
print("ChitChat")
print(stats.describe(cc_q2))
print("Mean {0}, SD {1}".format(cc_q2.mean(), cc_q2.std()))
print("GameBot")
print(stats.describe(rg_q2))
print("Mean {0}, SD {1}".format(rg_q2.mean(), rg_q2.std()))
stat.check_UX_statistical_significance(cc_q2, rg_q2)

print("\nUser experience question 3")
print("ChitChat")
print(stats.describe(cc_q3))
print("Mean {0}, SD {1}".format(cc_q3.mean(), cc_q3.std()))
print("GameBot")
print(stats.describe(rg_q3))
print("Mean {0}, SD {1}".format(rg_q3.mean(), rg_q3.std()))
stat.check_UX_statistical_significance(cc_q3, rg_q3)

print("\nUser experience question 4")
print("ChitChat")
print(stats.describe(cc_q4))
print("Mean {0}, SD {1}".format(cc_q4.mean(), cc_q4.std()))
print("GameBot")
print(stats.describe(rg_q4))
print("Mean {0}, SD {1}".format(rg_q4.mean(), rg_q4.std()))
stat.check_UX_statistical_significance(cc_q4, rg_q4)

print("\nUser experience question 5")
print("ChitChat")
print(stats.describe(cc_q5))
print("Mean {0}, SD {1}".format(cc_q5.mean(), cc_q5.std()))
print("GameBot")
print(stats.describe(rg_q5))
print("Mean {0}, SD {1}".format(rg_q5.mean(), rg_q5.std()))
stat.check_UX_statistical_significance(cc_q5, rg_q5)

print("\nUser experience question 6")
print("ChitChat")
print(stats.describe(cc_q6))
print("Mean {0}, SD {1}".format(cc_q6.mean(), cc_q6.std()))
print("GameBot")
print(stats.describe(rg_q6))
print("Mean {0}, SD {1}".format(rg_q6.mean(), rg_q6.std()))
stat.check_UX_statistical_significance(cc_q6, rg_q6)
